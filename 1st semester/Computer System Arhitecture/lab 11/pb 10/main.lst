     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf               
     8                                  import exit msvcrt.dll    
     9                                  import printf msvcrt.dll
    10                                  import scanf msvcrt.dll
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15 00000000 00000000                    n dd 0
    16 00000004 256300                      f db "%c", 0
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22                                          read_string:
    23 00000000 68[00000000]                        push dword n
    24 00000005 68[04000000]                        push f
    25 0000000A FF15[00000000]                      call [scanf]
    26 00000010 83C408                              add esp, 4*2
    27                                          
    28 00000013 A1[00000000]                        mov eax, [n]
    29 00000018 BB30000000                          mov ebx, 30h
    30 0000001D 39D8                                cmp eax, ebx
    31 0000001F 7416                                je the_end
    32 00000021 B843000000                              mov eax, 67
    33                                              
    34                                          
    35 00000026 50                                  push eax
    36 00000027 68[04000000]                        push f
    37 0000002C FF15[00000000]                      call [printf]
    38 00000032 83C408                              add esp, 4*2
    39 00000035 EBC9                            jmp read_string
    40                                          the_end:
    41                                          ; exit(0)
    42 00000037 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    43 00000039 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
