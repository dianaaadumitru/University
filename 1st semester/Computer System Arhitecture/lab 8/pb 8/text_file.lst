     1                                  bits 32
     2                                  
     3                                  global start
     4                                  
     5                                  ; declare external functions needed by our program
     6                                  extern exit, fopen, fread, fclose, printf
     7                                  import exit msvcrt.dll
     8                                  import fopen msvcrt.dll
     9                                  import fread msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 6162632E74787400            file_name db "abc.txt", 0   ; filename to be read
    16 00000008 7200                        access_mode db "r", 0       ; file access mode:
    17                                                                  ; r - opens a file for reading. The file must exist. 
    18 0000000A FFFFFFFF                    file_descriptor dd -1       ; variable to hold the file descriptor
    19                                      len equ 30                  ; maximum number of characters to read
    20 0000000E 00<rept>                    s times len db 0            ; string to hold the text which is read from file
    21 0000002C FF                          end_s db -1
    22 0000002D 00<rept>                    letters times 26 db 0       ;frequency string for every capital letter
    23 00000047 FF                          end_l db -1
    24 00000048 00                          l_max db 0                  ;most frequent letter
    25 00000049 00                          fr_max db 0                 ;its frequency
    26 0000004A 256300                      format_l db "%c", 0
    27 0000004D 256400                      format_f db "%d", 0
    28                                  
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      ;A text file is given. Read the content of the file, determine the uppercase letter with the highest frequency and display the letter along with its frequency on the screen. The name of text file is defined in t
    32                                      
    33                                      start:
    34                                          ; call fopen() to create the file
    35                                          ; fopen() will return a file descriptor in the EAX or 0 in case of error
    36                                          ; eax = fopen(file_name, access_mode)
    37 00000000 68[08000000]                    push dword access_mode     
    38 00000005 68[00000000]                    push dword file_name
    39 0000000A FF15[00000000]                  call [fopen]
    40 00000010 83C408                          add esp, 4*2                ; clean-up the stack
    41                                  
    42 00000013 A3[0A000000]                    mov [file_descriptor], eax  ; store the file descriptor returned by fopen
    43                                  
    44                                          ; check if fopen() has successfully created the file (EAX != 0)
    45 00000018 83F800                          cmp eax, 0
    46 0000001B 0F84B0000000                    je error_fopen
    47                                  
    48                                          ; read the text from file using fread()
    49                                          ; after the fread() call, EAX will contain the number of chars we've read 
    50                                          ; eax = fread(text, 1, len, file_descriptor)
    51 00000021 FF35[0A000000]                  push dword [file_descriptor]
    52 00000027 6A1E                            push dword len
    53 00000029 6A01                            push dword 1
    54 0000002B 68[0E000000]                    push dword s        
    55 00000030 FF15[00000000]                  call [fread]
    56 00000036 83C410                          add esp, 4*4
    57                                          
    58 00000039 BB1E000000                      mov ebx, len
    59 0000003E 29C3                            sub ebx, eax    
    60 00000040 B81E000000                      mov eax, len
    61 00000045 29D8                            sub eax, ebx    ;the length of the read text
    62                                  
    63 00000047 89C1                            mov ecx, eax    ; we put the length l in ECX in order to make the loop
    64 00000049 BE[0E000000]                    mov esi, s      ;in eds:esi we will store the FAR address of the string "s"
    65 0000004E FC                              cld             ;parse the string from left to right(DF=0)
    66 0000004F E333                            jecxz the_end
    67                                              start_loop:
    68 00000051 AC                                      lodsb       ;in eax we will have the current doubleword from the string
    69 00000052 3C41                                    cmp al, 'A'
    70 00000054 7C2C                                    jl too_small
    71 00000056 3C5A                                        cmp al, 'Z'
    72 00000058 7F28                                        jg too_big      ;verify if it's a big letter and if it is not it goes to the next letter from the string
    73 0000005A 2C41                                            sub al, 'A' ;we calculate the position into the frequency string
    74 0000005C 89C7                                            mov edi, eax
    75 0000005E 8B9F[2D000000]                                  mov ebx, [letters + edi]
    76 00000064 43                                              inc ebx     ;we increase the frequency of the letter
    77 00000065 0441                                            add al, 'A'
    78 00000067 8A15[49000000]                                  mov dl, [fr_max]
    79 0000006D 38D3                                            cmp bl, dl
    80 0000006F 7C0B                                            jl jump1
    81 00000071 A2[48000000]                                        mov [l_max], al     ;we save in l_max the last letter with the highest frequency
    82 00000076 881D[49000000]                                      mov [fr_max], bl    ;we save in fr_max the frequency of last letter with the highest frequency
    83                                                          jump1:
    84 0000007C 899F[2D000000]                                  mov [letters + edi], ebx    ;we mov the frequencyof the current leter in the string letters
    85                                                      too_big:
    86                                                  too_small:
    87 00000082 E2CD                                loop start_loop
    88                                          the_end:
    89                                                          
    90 00000084 A0[48000000]                    mov al, [l_max]
    91 00000089 B400                            mov ah, 0
    92 0000008B 66BA0000                        mov dx, 0
    93 0000008F 6652                            push dx
    94 00000091 6650                            push ax
    95 00000093 58                              pop eax     ;we will display the letter stored in eax
    96                                           
    97                                          ; place parameters on the stack from right to left
    98 00000094 50                              push eax
    99 00000095 68[4A000000]                    push dword format_l     
   100 0000009A FF15[00000000]                  call [printf]   ; call function printf for printing
   101 000000A0 83C408                          add esp, 4 * 2  ; free parameters on the stack; 4 = size of dword; 2 = number of parameters
   102                                          
   103 000000A3 A0[49000000]                    mov al, [fr_max]
   104 000000A8 B400                            mov ah, 0
   105 000000AA 66BA0000                        mov dx, 0
   106 000000AE 6652                            push dx
   107 000000B0 6650                            push ax
   108 000000B2 58                              pop eax     ;we will display the frequency stored in ebx
   109                                  
   110                                          ; place parameters on the stack from right to left
   111 000000B3 50                              push eax
   112 000000B4 68[4D000000]                    push dword format_f
   113 000000B9 FF15[00000000]                  call [printf]   ; call function printf for printing
   114 000000BF 83C408                          add esp, 4 * 2  ; free parameters on the stack; 4 = size of dword; 2 = number of parameters
   115                                        
   116                                          ; call fclose() to close the file
   117                                          ; fclose(file_descriptor)
   118 000000C2 FF35[0A000000]                  push dword [file_descriptor]
   119 000000C8 FF15[00000000]                  call [fclose]
   120 000000CE 83C404                          add esp, 4
   121                                  
   122                                        error_fopen:
   123                                      
   124                                          ; exit(0)
   125 000000D1 6A00                            push dword 0
   126 000000D3 FF15[00000000]                  call [exit]
