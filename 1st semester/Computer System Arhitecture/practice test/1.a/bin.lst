     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 0304040208                      text db 3, 4, 4, 2, 8
    15                                          len equ $-text
    16 00000005 FFFFFFFF<rept>                  s times len dd -1
    17 00000019 02                              two db 2
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22                                  
    23 00000000 B905000000                      mov ecx, len    ; we put the length len in ECX in order to make the loop
    24 00000005 BE[00000000]                    mov esi, text      ;in eds:esi we will store the FAR address of the string "s"
    25 0000000A FC                              cld             ;parse the string from left to right(DF=0)
    26 0000000B BF00000000                      mov edi, 0
    27                                          
    28 00000010 E31C                            jecxz the_end
    29                                              start_loop:
    30 00000012 AC                                      lodsb       ;in eax we will have the curremt doubleword from the string
    31 00000013 BB00000000                              mov ebx, 0
    32                                                  transf:
    33 00000018 B400                                        mov ah, 0
    34 0000001A F635[19000000]                              div byte [two]
    35 00000020 00E3                                        add bl, ah
    36 00000022 D1CB                                        ror ebx, 1
    37 00000024 3C00                                        cmp al, 0
    38 00000026 7404                                        jz end_tranfs   ;if the quotient (from al) is 0 it means we obtained all the digits and we can leave the loop "transf"
    39                                                                      ;else prepare the quotient for a new iteration 
    40 00000028 B400                                        mov ah, 0
    41 0000002A EBEC                                    jmp transf
    42                                                  end_tranfs:
    43 0000002C E2E4                                loop start_loop
    44                                          the_end:
    45                                          ; exit(0)
    46 0000002E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    47 00000030 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
