     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  global start        
     4                                  
     5                                  extern exit, fopen, fread, fclose, printf, fprintf
     6                                  import exit msvcrt.dll
     7                                  import fopen msvcrt.dll
     8                                  import fread msvcrt.dll
     9                                  import fclose msvcrt.dll 
    10                                  import printf msvcrt.dll   
    11                                  import fprintf msvcrt.dll
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 6162632E74787400            file_name db "abc.txt", 0
    17                                      ; filename to be read
    18 00000008 7200                        access_mode db "r", 0       ; file access mode:
    19                                                                  ; r - opens a file for reading. The file must exist. 
    20 0000000A FFFFFFFF                    file_descriptor dd -1       ; variable to hold the file descriptor
    21                                      len equ 30                 ; maximum number of characters to read
    22 0000000E 00<rept>                    text times len db 0         ; string to hold the text which is read from file
    23 0000002C 00                          sum db 0
    24 0000002D 0100                        prod dw 1
    25 0000002F 00                          maxi db 0 
    26 00000030 FF<rept>                    poz times len db -1
    27 0000004E 73756D3A2025642000          format_1 db "sum: %d ", 0
    28 00000057 70726F647563743A20-         format_2 db "product: %d ", 0
    28 00000060 25642000           
    29 00000064 6D6178696D3A202564-         format_3 db "maxim: %d ", 0
    29 0000006D 2000               
    30 0000006F FF                          l db -1
    31 00000070 616263322E74787400          file_name_2 db "abc2.txt", 0    ; filename to be created
    32 00000079 7700                        access_mode_2 db "w", 0       ; file access mode:
    33                                                                    ; w - creates an empty file for writing
    34 0000007B FFFFFFFF                    file_descriptor_2 dd -1       ; variable to hold the file descriptor
    35                                      
    36                                  ; our code starts here
    37                                  segment code use32 class=code
    38                                      start:
    39                                          ; ...
    40                                          ; call fopen() to create the file
    41                                          ; fopen() will return a file descriptor in the EAX or 0 in case of error
    42                                          ; eax = fopen(file_name, access_mode)
    43 00000000 68[08000000]                    push dword access_mode     
    44 00000005 68[00000000]                    push dword file_name
    45 0000000A FF15[00000000]                  call [fopen]
    46 00000010 83C408                          add esp, 4*2                ; clean-up the stack
    47                                  
    48 00000013 A3[0A000000]                    mov [file_descriptor], eax  ; store the file descriptor returned by fopen
    49                                  
    50                                          ; check if fopen() has successfully created the file (EAX != 0)
    51 00000018 83F800                          cmp eax, 0
    52 0000001B 0F849E000000                    je error_fopen
    53 00000021 FF35[0A000000]                      push dword [file_descriptor]
    54 00000027 6A1E                                push dword len
    55 00000029 6A01                                push dword 1
    56 0000002B 68[0E000000]                        push dword text
    57 00000030 FF15[00000000]                      call [fread]
    58 00000036 83C410                              add esp, 4*4
    59                                              
    60 00000039 BB1E000000                          mov ebx, len
    61 0000003E 29C3                                sub ebx, eax    
    62 00000040 B81E000000                          mov eax, len
    63 00000045 29D8                                sub eax, ebx    ;in eax - the length of the read text
    64                                              
    65 00000047 88C6                                mov dh, al
    66                                              
    67 00000049 89C1                                mov ecx, eax    ; we put the length len in ECX in order to make the loop
    68 0000004B BE[0E000000]                        mov esi, text      ;in eds:esi we will store the FAR address of the string "text"
    69 00000050 FC                                  cld             ;parse the string from left to right(DF=0)
    70 00000051 BF00000000                          mov edi, 0
    71                                  
    72 00000056 E367                                jecxz the_end
    73                                              start_loop:
    74 00000058 AC                                      lodsb       ;in eax we will have the current doubleword from the string
    75 00000059 3C20                                    cmp al, " "
    76 0000005B 7460                                    je space
    77 0000005D 2C30                                    sub al, '0' ;transform from a character to a number
    78 0000005F 88C2                                    mov dl, al  ;copy of the number
    79 00000061 B600                                    mov dh, 0
    80 00000063 8A1D[2C000000]                          mov bl, byte [sum]
    81 00000069 00D8                                    add al, bl
    82 0000006B A2[2C000000]                            mov [sum], al
    83                                                  
    84                                                  
    85 00000070 88D0                                    mov al, dl
    86 00000072 8A1D[2F000000]                          mov bl, byte [maxi]
    87 00000078 38D8                                    cmp al, bl
    88 0000007A 7C16                                    jl lower
    89 0000007C A2[2F000000]                                mov [maxi], al
    90 00000081 88F0                                        mov al, dh
    91 00000083 28C8                                        sub al, cl
    92 00000085 BF00000000                                  mov edi, 0
    93 0000008A 8887[30000000]                              mov [poz + edi], al
    94 00000090 EB17                                        jmp next
    95                                                  lower:
    96 00000092 88D0                                    mov al, dl
    97 00000094 8A1D[2F000000]                          mov bl, byte [maxi]
    98 0000009A 38D8                                    cmp al, bl
    99 0000009C 740B                                    je maxi_2
   100 0000009E 88F0                                        mov al, dh
   101 000000A0 28C8                                        sub al, cl
   102 000000A2 47                                          inc edi
   103 000000A3 8887[30000000]                              mov [poz + edi], al
   104                                      
   105                                                  maxi_2:
   106                                                  next:
   107 000000A9 88D0                                    mov al, dl
   108 000000AB B400                                    mov ah, 0
   109 000000AD 668B1D[2D000000]                        mov bx, [prod]
   110 000000B4 66F7E3                                  mul bx
   111 000000B7 66A3[2D000000]                          mov [prod], ax
   112                                                  space:
   113 000000BD E299                                loop start_loop
   114                                              the_end:
   115                                  
   116                                         error_fopen:
   117                                         
   118 000000BF A0[2C000000]                    mov al, [sum]
   119 000000C4 B400                            mov ah, 0
   120 000000C6 66BA0000                        mov dx, 0
   121 000000CA 6652                            push dx
   122 000000CC 6650                            push ax
   123 000000CE 58                              pop eax
   124                                          
   125 000000CF 50                              push eax
   126 000000D0 68[4E000000]                    push dword format_1
   127 000000D5 FF15[00000000]                  call [printf]
   128 000000DB 83C408                          add esp, 4*2
   129                                          
   130 000000DE 66A1[2D000000]                  mov ax, [prod]
   131 000000E4 66BA0000                        mov dx, 0
   132 000000E8 6652                            push dx
   133 000000EA 6650                            push ax
   134 000000EC 58                              pop eax
   135                                          
   136 000000ED 50                              push eax
   137 000000EE 68[57000000]                    push dword format_2
   138 000000F3 FF15[00000000]                  call [printf]
   139 000000F9 83C408                          add esp, 4*2
   140                                          
   141 000000FC A0[2F000000]                    mov al, [maxi]
   142 00000101 B400                            mov ah, 0
   143 00000103 66BA0000                        mov dx, 0
   144 00000107 6652                            push dx
   145 00000109 6650                            push ax
   146 0000010B 58                              pop eax
   147                                          
   148 0000010C 50                              push eax
   149 0000010D 68[64000000]                    push dword format_3
   150 00000112 FF15[00000000]                  call [printf]
   151 00000118 83C408                          add esp, 4*2
   152                                          
   153 0000011B 88D0                            mov al, dl
   154 0000011D B400                            mov ah, 0
   155 0000011F 668B1D[2D000000]                mov bx, [prod]
   156 00000126 66F7E3                          mul bx
   157 00000129 66A3[2D000000]                  mov [prod], ax
   158                                          
   159                                                  ; call fopen() to create the file
   160                                          ; fopen() will return a file descriptor in the EAX or 0 in case of error
   161                                          ; eax = fopen(file_name, access_mode)
   162 0000012F 68[79000000]                    push dword access_mode_2     
   163 00000134 68[70000000]                    push dword file_name_2
   164 00000139 FF15[00000000]                  call [fopen]
   165 0000013F 83C408                          add esp, 4*2                ; clean-up the stack
   166                                  
   167 00000142 A3[7B000000]                    mov [file_descriptor_2], eax  ; store the file descriptor returned by fopen
   168                                          
   169                                          ; check if fopen() has successfully created the file (EAX != 0)
   170 00000147 83F800                          cmp eax, 0
   171 0000014A 7423                            je final
   172                                  
   173                                          ; write the text to file using fprintf()
   174                                          ; fprintf(file_descriptor, text)
   175 0000014C 68[0E000000]                    push dword text
   176 00000151 FF35[7B000000]                  push dword [file_descriptor_2]
   177 00000157 FF15[00000000]                  call [fprintf]
   178 0000015D 83C408                          add esp, 4*2
   179                                  
   180                                          ; call fclose() to close the file
   181                                          ; fclose(file_descriptor)
   182 00000160 FF35[7B000000]                  push dword [file_descriptor_2]
   183 00000166 FF15[00000000]                  call [fclose]
   184 0000016C 83C404                          add esp, 4
   185                                  
   186                                        final:
   187                                          ; exit(0)
   188                                          
   189 0000016F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   190 00000171 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
