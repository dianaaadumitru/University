     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import scanf msvcrt.dll 
    10                                  import printf msvcrt.dll   
    11                                  
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 00<rept>                    cuv times 30 db 0
    17 0000001E 00000000                    n dd 0
    18 00000022 257300                      format_cuv db "%s", 0
    19 00000025 256400                      format_n db "%d", 0
    20 00000028 00<rept>                    text times 60 db 0
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26 00000000 68[00000000]                    push cuv
    27 00000005 68[22000000]                    push format_cuv
    28 0000000A FF15[00000000]                  call [scanf]
    29 00000010 83C408                          add esp, 8
    30                                          
    31 00000013 68[1E000000]                    push n
    32 00000018 68[25000000]                    push dword format_n
    33 0000001D FF15[00000000]                  call [scanf]
    34 00000023 83C408                          add esp, 8
    35                                          
    36 00000026 BE[00000000]                    mov esi, cuv
    37 0000002B B91E000000                      mov ecx, 30
    38 00000030 BF00000000                      mov edi, 0
    39 00000035 66A1[1E000000]                  mov ax, [n]
    40 0000003B 668B15[20000000]                mov dx, [n+2]
    41 00000042 66BB0200                        mov bx, 2
    42 00000046 66F7F3                          div bx
    43 00000049 6683FA00                        cmp dx, 0
    44 0000004D 7414                            je even_number
    45 0000004F E310                                jecxz the_end
    46                                                  start_loop:
    47 00000051 AC                                          lodsb
    48 00000052 3C00                                        cmp al, 0
    49 00000054 740B                                        je not_character
    50 00000056 0414                                        add al, 20
    51 00000058 8887[28000000]                              mov [text+edi], al
    52 0000005E 47                                          inc edi
    53                                                  
    54 0000005F E2F0                                    loop start_loop
    55                                              the_end:
    56                                              not_character:
    57 00000061 EB3B                                jmp here
    58                                          even_number:
    59 00000063 E339                            jecxz the_end1
    60                                              start_loop1:
    61 00000065 AC                                      lodsb
    62 00000066 3C61                                    cmp al, "a"
    63 00000068 7412                                    je vowel
    64 0000006A 3C65                                    cmp al, "e"
    65 0000006C 740E                                    je vowel
    66 0000006E 3C69                                    cmp al, "i"
    67 00000070 740A                                    je vowel
    68 00000072 3C6F                                    cmp al, "o"
    69 00000074 7406                                    je vowel
    70 00000076 3C75                                    cmp al, "u"
    71 00000078 7402                                    je vowel
    72 0000007A EB19                                    jmp not_vowel
    73                                                  vowel:
    74 0000007C 8887[28000000]                          mov [text+edi], al
    75 00000082 47                                      inc edi
    76 00000083 B370                                    mov bl, "p"
    77 00000085 889F[28000000]                          mov [text+edi], bl
    78 0000008B 47                                      inc edi
    79 0000008C 8887[28000000]                          mov [text+edi], al
    80 00000092 47                                      inc edi
    81 00000093 EB07                                    jmp here_2
    82                                                  not_vowel:
    83 00000095 8887[28000000]                          mov [text+edi], al
    84 0000009B 47                                      inc edi
    85                                                  here_2:
    86                                                  
    87 0000009C E2C7                                    loop start_loop1
    88                                              the_end1:
    89                                          
    90                                          here:
    91 0000009E 68[28000000]                    push text
    92 000000A3 68[22000000]                    push format_cuv
    93 000000A8 FF15[00000000]                  call [printf]
    94 000000AE 83C408                          add esp, 8
    95                                      
    96                                          ; exit(0)
    97 000000B1 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    98 000000B3 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
