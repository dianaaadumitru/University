     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, fopen, fclose, fread, printf               
     8                                  import exit msvcrt.dll   
     9                                  import scanf msvcrt.dll
    10                                  import fopen msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import fread msvcrt.dll
    13                                  import printf msvcrt.dll
    14                                   
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18 00000000 00<rept>                    file_name times 15 db 0
    19 0000000F 7200                        access_mode db "r", 0
    20 00000011 FFFFFFFF                    file_descriptor dd -1
    21                                      len equ 100
    22 00000015 00<rept>                    text times len db 0
    23 00000079 00<rept>                    cuv times 50 db 0
    24 000000AB 257300                      format db "%s", 0
    25                                  
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; ...
    30                                          
    31 00000000 68[00000000]                    push file_name
    32 00000005 68[AB000000]                    push format
    33 0000000A FF15[00000000]                  call [scanf]
    34 00000010 83C408                          add esp, 8
    35                                          
    36 00000013 68[0F000000]                    push access_mode
    37 00000018 68[00000000]                    push file_name
    38 0000001D FF15[00000000]                  call [fopen]
    39                                          
    40 00000023 A3[11000000]                    mov [file_descriptor], eax
    41                                          
    42 00000028 83F800                          cmp eax, 0
    43 0000002B 0F84AE000000                    je error_fopen
    44                                          
    45 00000031 FF35[11000000]                  push dword [file_descriptor]
    46 00000037 6A64                            push dword len
    47 00000039 6A01                            push dword 1
    48 0000003B 68[15000000]                    push text
    49 00000040 FF15[00000000]                  call [fread]
    50 00000046 83C410                          add esp, 16
    51                                          
    52                                          
    53 00000049 89C1                            mov ecx, eax
    54 0000004B BE[15000000]                    mov esi, text
    55 00000050 B200                            mov dl, 0
    56 00000052 BF00000000                      mov edi, 0
    57                                          
    58 00000057 E377                            jecxz the_end
    59                                              start_loop:
    60 00000059 AC                                      lodsb
    61 0000005A 3C20                                    cmp al, byte " "
    62 0000005C 7409                                    je end_word
    63 0000005E 8887[79000000]                              mov [cuv+edi], al
    64 00000064 47                                          inc edi
    65 00000065 EB3C                                        jmp here
    66                                                  
    67                                                  end_word:
    68 00000067 B600                                    mov dh, 0
    69 00000069 6689D0                                  mov ax, dx
    70 0000006C B304                                    mov bl, 4
    71 0000006E F6F3                                    div bl
    72 00000070 80FC00                                  cmp ah, 0
    73 00000073 751D                                    jne not_multiple
    74 00000075 C687[79000000]20                            mov [cuv+edi], byte " "
    75 0000007C 47                                          inc edi
    76                                                      
    77 0000007D 60                                          pushad
    78 0000007E 68[79000000]                                push cuv
    79 00000083 68[AB000000]                                push format
    80 00000088 FF15[00000000]                              call [printf]
    81 0000008E 83C408                                      add esp, 8
    82 00000091 61                                          popad
    83                                                  
    84                                                  not_multiple:
    85 00000092 FEC2                                    inc dl
    86                                                  not_finish:
    87 00000094 C687[79000000]00                        mov [cuv+edi],byte 0
    88 0000009B 4F                                      dec edi
    89 0000009C 83FF00                                  cmp edi, 0
    90 0000009F 7402                                    je free_cuv
    91 000000A1 EBF1                                    jmp not_finish
    92                                                  free_cuv:
    93                                              
    94                                                  here:
    95 000000A3 E2B4                                loop start_loop
    96 000000A5 B600                            mov dh, 0
    97 000000A7 6689D0                                  mov ax, dx
    98 000000AA B304                                    mov bl, 4
    99 000000AC F6F3                                    div bl
   100 000000AE 80FC00                                  cmp ah, 0
   101 000000B1 751D                                    jne not_multiple2
   102 000000B3 C687[79000000]20                            mov [cuv+edi], byte " "
   103 000000BA 47                                          inc edi
   104                                                      
   105 000000BB 60                                          pushad
   106 000000BC 68[79000000]                                push cuv
   107 000000C1 68[AB000000]                                push format
   108 000000C6 FF15[00000000]                              call [printf]
   109 000000CC 83C408                                      add esp, 8
   110 000000CF 61                                          popad
   111                                                  
   112                                                  not_multiple2:
   113                                          
   114                                          the_end:
   115                                          
   116                                          
   117 000000D0 FF35[11000000]                  push dword [file_descriptor]
   118 000000D6 FF15[00000000]                  call [fclose]
   119 000000DC 83C404                          add esp, 4
   120                                          error_fopen:
   121                                      
   122                                          ; exit(0)
   123 000000DF 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   124 000000E1 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
