     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start   
     5                                       
     6                                  ;Se da in data segment numele unui fisier. Acesta contine cifre separate prin spatiu (cifrele sunt din multimea cifrelor bazei 16 separate).
     7                                  ;Sa se afiseze fiecare cifra citita din fisier si numarul de biti 1 din reprezentarea binara a acesteia.
     8                                  
     9                                  extern exit, fopen, fclose, fread, printf               
    10                                  import exit msvcrt.dll 
    11                                  import fclose msvcrt.dll
    12                                  import fopen msvcrt.dll
    13                                  import fread msvcrt.dll
    14                                  import printf msvcrt.dll   
    15                                  
    16                                  
    17                                  ; our data is declared here (the variables needed by our program)
    18                                  segment data use32 class=data
    19                                      ; ...
    20 00000000 696E7075742E747874-         file_name db "input.txt", 0
    20 00000009 00                 
    21 0000000A 7200                        access_mode db "r", 0
    22 0000000C FFFFFFFF                    file_descriptor dd -1
    23                                      len equ 100
    24 00000010 00<rept>                    text times len db 0
    25 00000074 257300                      format db "%s", 0
    26 00000077 00<rept>                    text2 times len db 0
    27 000000DB 00                          nr1 db 0
    28 000000DC 00                          nr db 0
    29                                  
    30                                      
    31                                  ; our code starts here
    32                                  segment code use32 class=code
    33                                      start:
    34                                          ; ...
    35                                          
    36 00000000 68[0A000000]                    push access_mode
    37 00000005 68[00000000]                    push file_name
    38 0000000A FF15[00000000]                  call [fopen]
    39 00000010 83C408                          add esp, 4*2
    40                                          
    41 00000013 A3[0C000000]                    mov [file_descriptor], eax
    42                                          
    43 00000018 83F800                          cmp eax, 0
    44 0000001B 7429                            je error_fopen
    45                                          
    46 0000001D FF35[0C000000]                  push dword [file_descriptor]
    47 00000023 6A64                            push dword len
    48 00000025 6A01                            push dword 1
    49 00000027 68[10000000]                    push text
    50 0000002C FF15[00000000]                  call [fread]
    51 00000032 83C410                          add esp, 4*4
    52                                          
    53 00000035 60                              pushad
    54                                          
    55 00000036 FF35[0C000000]                  push dword [file_descriptor]
    56 0000003C FF15[00000000]                  call [fclose]
    57 00000042 83C404                          add esp, 4
    58                                          
    59 00000045 61                              popad
    60                                          
    61                                          error_fopen:
    62                                          
    63 00000046 89C1                            mov ecx, eax
    64 00000048 BE[10000000]                    mov esi, text
    65 0000004D BF00000000                      mov edi, 0
    66                                          
    67 00000052 E36C                            jecxz the_end
    68                                              start_loop:
    69 00000054 AC                                      lodsb
    70 00000055 3C20                                    cmp al, " "
    71 00000057 7465                                    je space
    72 00000059 B200                                        mov dl, 0
    73 0000005B 8815[DB000000]                              mov [nr1], dl
    74 00000061 A2[DC000000]                                mov [nr], al
    75 00000066 2C30                                        sub al, byte "0"
    76 00000068 B400                                        mov ah, 0
    77                                  
    78                                                      conv2:
    79 0000006A B302                                        mov bl, 2
    80 0000006C F6F3                                        div bl
    81 0000006E 80FC01                                      cmp ah, 1
    82 00000071 750E                                        jne not_1
    83 00000073 8A15[DB000000]                                  mov dl, [nr1]
    84 00000079 FEC2                                            inc dl
    85 0000007B 8815[DB000000]                                  mov [nr1], dl
    86                                                          
    87                                                      not_1:
    88 00000081 B400                                        mov ah, 0
    89 00000083 3C00                                        cmp al, 0
    90 00000085 7402                                        je end_transf
    91 00000087 EBE1                                        jmp conv2
    92                                                      end_transf:
    93                                  
    94                                                     
    95 00000089 8A15[DC000000]                          mov dl, byte [nr]
    96 0000008F 8897[77000000]                          mov [text2+edi], dl
    97 00000095 47                                      inc edi
    98 00000096 C687[77000000]20                        mov [text2+edi], byte " "
    99 0000009D 47                                      inc edi
   100 0000009E 8A15[DB000000]                          mov dl, [nr1]
   101 000000A4 80C230                                  add dl, byte "0"
   102 000000A7 8897[77000000]                          mov [text2+edi], dl
   103 000000AD 47                                      inc edi
   104 000000AE C687[77000000]20                        mov [text2+edi], byte " "
   105 000000B5 47                                      inc edi
   106 000000B6 C687[77000000]20                        mov [text2+edi], byte " "
   107 000000BD 47                                      inc edi
   108                                                  
   109                                              space: 
   110 000000BE E294                                loop start_loop
   111                                          
   112                                          
   113                                                      
   114                                          the_end:
   115                                                  
   116 000000C0 68[77000000]                push text2
   117 000000C5 68[74000000]                push format
   118 000000CA FF15[00000000]              call [printf]
   119 000000D0 83C408                      add esp, 8
   120                                      
   121                                          ; exit(0)
   122 000000D3 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   123 000000D5 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
