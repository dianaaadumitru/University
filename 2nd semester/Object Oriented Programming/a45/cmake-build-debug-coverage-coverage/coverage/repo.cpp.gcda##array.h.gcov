        -:    0:Source:c:/users/diana/desktop/uni work/2nd sem/oop/a45-913-dumitru-diana/dynamic_vector/array.h
        -:    0:Graph:C:\Users\diana\Desktop\uni work\2nd sem\OOP\a45-913-Dumitru-Diana\cmake-build-debug-coverage-coverage\CMakeFiles\a45_913_Dumitru_Diana.dir\repo\repo.cpp.gcno
        -:    0:Data:C:\Users\diana\Desktop\uni work\2nd sem\OOP\a45-913-Dumitru-Diana\cmake-build-debug-coverage-coverage\CMakeFiles\a45_913_Dumitru_Diana.dir\repo\repo.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#pragma once
        -:    2:#include <iostream>
        -:    3:#include "../domain/domain.h"
        -:    4:
        -:    5:typedef Tutorial TElem;
        -:    6://class DynamicVector
        -:    7://{
        -:    8://private:
        -:    9://    int size;
        -:   10://    int capacity;
        -:   11://    TElem* elements;
        -:   12://    static const unsigned int DEFAULT_CAPACITY = 10;
        -:   13://
        -:   14://    void resize(double factor = 2);
        -:   15://
        -:   16://public:
        -:   17://    // constructors and destructor
        -:   18://    DynamicVector();
        -:   19://    DynamicVector(unsigned int initialCapacity = 2);
        -:   20://    DynamicVector(const DynamicVector& v);
        -:   21://    ~DynamicVector();
        -:   22://
        -:   23://    // Overloading the [] operator
        -:   24://    TElem &operator[](int pos);
        -:   25://
        -:   26://    // Adds an element to the current DynamicVector.
        -:   27://    void add(TElem e);
        -:   28://
        -:   29://    // Deletes an element from a given position
        -:   30://    void delete_elem(unsigned int pos);
        -:   31://
        -:   32://    // Returns all elements
        -:   33://    TElem* get_all_elems() const;
        -:   34://
        -:   35://    // Returns the size of the dynamic vector
        -:   36://    int getSize() const;
        -:   37://};
        -:   38:
        -:   39:template <class T>
        -:   40:class DynamicVector
        -:   41:{
        -:   42:private:
        -:   43:    T* elements;
        -:   44:    int size;
        -:   45:    int capacity;
        -:   46:    static const unsigned int DEFAULT_CAPACITY = 10;
        -:   47:
        -:   48:    // Resizes the current DynamicVector, multiplying its capacity by a given factor (real number).
        -:   49:    void resize(double factor = 2);
        -:   50:
        -:   51:public:
        -:   52:    // constructors and destructor
        -:   53:    DynamicVector();
        -:   54:    DynamicVector(unsigned int initialCapacity);
        -:   55:    DynamicVector(const DynamicVector& v);
        -:   56:    ~DynamicVector();
        -:   57:
        -:   58:    // Overloading the [] operator
        -:   59:    T &operator[](int pos);
        -:   60:
        -:   61:    // + operator
        -:   62:    DynamicVector<T>& operator+(const T& classObj);
        -:   63:
        -:   64:    // Adds an element to the current DynamicVector.
        -:   65:    void add(T e);
        -:   66:
        -:   67:    // Deletes an element from a given position
        -:   68:    void delete_elem(unsigned int pos);
        -:   69:
        -:   70:    // Returns all elements
        -:   71:    T* get_all_elems() const;
        -:   72:
        -:   73:    // Returns the size of the dynamic vector
        -:   74:    int getSize();
        -:   75:};
        -:   76:
        -:   77:template<class T>
        -:   78:inline DynamicVector<T>::DynamicVector()
        -:   79:{
        -:   80:    capacity = DEFAULT_CAPACITY;
        -:   81:    size = 0;
        -:   82:    elements = new T[DEFAULT_CAPACITY];
        -:   83:
        -:   84:}
        -:   85:
        -:   86:template<class T>
        -:   87:DynamicVector<T>::DynamicVector(unsigned int initial_capacity)
        -:   88:{
        -:   89:    elements = new T[initial_capacity];
        -:   90:    size = 0;
        -:   91:    capacity = initial_capacity;
        -:   92:}
        -:   93:
        -:   94:template<class T>
        -:   95:DynamicVector<T>::DynamicVector(const DynamicVector<T> &v)
        -:   96:{
        -:   97:    this->size = v.size;
        -:   98:    this->capacity = v.capacity;
        -:   99:    this->elements = new T[this->capacity];
        -:  100:    for (int i = 0; i < this->size; ++i) {
        -:  101:        this->elements[i] = v.elements[i];
        -:  102:    }
        -:  103:}
        -:  104:
        -:  105:template<class T>
        -:  106:DynamicVector<T>::~DynamicVector()
        -:  107:{
        -:  108:    delete[] elements;
        -:  109:}
        -:  110:
        -:  111:
        -:  112:template<class T>
       58:  113:T &DynamicVector<T>::operator[](int pos) {
       58:  113-block  0
       58:  114:    return this->elements[pos];  //return array element
       58:  114-block  0
        -:  115:}
        -:  116:
        -:  117:template<class T>
       32:  118:void DynamicVector<T>::add(T e) {
       32:  118-block  0
       32:  119:    if(this->size == this->capacity)
       32:  119-block  0
    #####:  120:        this->resize();
    $$$$$:  120-block  0
        -:  121:
       32:  122:    this->elements[this->size] = e;
       32:  122-block  0
       32:  123:    this->size++;
       32:  124:}
        -:  125:
        -:  126:template<class T>
    #####:  127:void DynamicVector<T>::resize(double factor) {
    $$$$$:  127-block  0
    #####:  128:    this->capacity *= static_cast<int>(factor);
        -:  129:
    #####:  130:    T * aux = new T[this->capacity];
    $$$$$:  130-block  0
    $$$$$:  130-block  1
    $$$$$:  130-block  2
    $$$$$:  130-block  3
    $$$$$:  130-block  4
    $$$$$:  130-block  5
    $$$$$:  130-block  6
    %%%%%:  130-block  7
    %%%%%:  130-block  8
    %%%%%:  130-block  9
    %%%%%:  130-block 10
    %%%%%:  130-block 11
    %%%%%:  130-block 12
    %%%%%:  130-block 13
    %%%%%:  130-block 14
    #####:  131:    for (int i = 0; i < this->size; ++i) {
    $$$$$:  131-block  0
    $$$$$:  131-block  1
    #####:  132:        aux[i] = this->elements[i];
    $$$$$:  132-block  0
        -:  133:    }
    #####:  134:    delete[] this->elements;
    $$$$$:  134-block  0
    $$$$$:  134-block  1
    $$$$$:  134-block  2
    $$$$$:  134-block  3
    $$$$$:  134-block  4
    #####:  135:    this->elements = aux;
    #####:  136:}
    $$$$$:  136-block  0
    %%%%%:  136-block  1
        -:  137:
        -:  138:template<class T>
       14:  139:void DynamicVector<T>::delete_elem(unsigned int pos) {
       14:  139-block  0
       14:  140:    if (pos < 0 || pos >= this->size)
       14:  140-block  0
    #####:  141:        return;
    $$$$$:  141-block  0
        -:  142:
      154:  143:    T* aux = new T[this->capacity];
       14:  143-block  0
       14:  143-block  1
    $$$$$:  143-block  2
       14:  143-block  3
      154:  143-block  4
      140:  143-block  5
      140:  143-block  6
    %%%%%:  143-block  7
    %%%%%:  143-block  8
    %%%%%:  143-block  9
    %%%%%:  143-block 10
    %%%%%:  143-block 11
    %%%%%:  143-block 12
    %%%%%:  143-block 13
    %%%%%:  143-block 14
       24:  144:    for (int i = 0; i < pos; ++i) {
       14:  144-block  0
       24:  144-block  1
       10:  145:        aux[i] = this->elements[i];
       10:  145-block  0
        -:  146:    }
        -:  147:
       25:  148:    for (int i = pos + 1; i < this->size; ++i) {
       14:  148-block  0
       25:  148-block  1
       11:  149:        aux[i - 1] = this->elements[i];
       11:  149-block  0
        -:  150:    }
      154:  151:    delete[] this->elements;
       14:  151-block  0
       14:  151-block  1
      154:  151-block  2
      140:  151-block  3
       14:  151-block  4
       14:  152:    this->elements = aux;
       14:  153:    this->size--;
       14:  153-block  0
       14:  153-block  1
    %%%%%:  153-block  2
        -:  154:}
        -:  155:
        -:  156:template<class T>
       58:  157:T *DynamicVector<T>::get_all_elems() const {
       58:  157-block  0
       58:  158:    return this->elements;
       58:  158-block  0
        -:  159:}
        -:  160:
        -:  161:template<class T>
      237:  162:int DynamicVector<T>::getSize() {
      237:  162-block  0
      237:  163:    return this->size;
      237:  163-block  0
        -:  164:}
        -:  165:
        -:  166:template <class T>
        -:  167:DynamicVector<T>& DynamicVector<T>::operator+(const T& classObj) {
        -:  168:    this->add(classObj);
        -:  169:    return *this;
        -:  170:}
