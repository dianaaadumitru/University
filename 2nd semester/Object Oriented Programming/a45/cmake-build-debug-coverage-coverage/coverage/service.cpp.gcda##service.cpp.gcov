        -:    0:Source:C:/Users/diana/Desktop/uni work/2nd sem/OOP/a45-913-Dumitru-Diana/service/service.cpp
        -:    0:Graph:C:\Users\diana\Desktop\uni work\2nd sem\OOP\a45-913-Dumitru-Diana\cmake-build-debug-coverage-coverage\CMakeFiles\a45_913_Dumitru_Diana.dir\service\service.cpp.gcno
        -:    0:Data:C:\Users\diana\Desktop\uni work\2nd sem\OOP\a45-913-Dumitru-Diana\cmake-build-debug-coverage-coverage\CMakeFiles\a45_913_Dumitru_Diana.dir\service\service.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:#include "service.h"
        -:    3:
        1:    4:bool Service::add_tutorial_service(const std::string& title, const std::string& presenter, double min, double sec, int likes, const std::string& link)
        1:    4-block  0
        -:    5:///add a new tutorial to the list
        -:    6:///returns true if the tutorial was added, false otherwise
        -:    7:{
        2:    8:    Tutorial t{ title, presenter, Duration{min, sec}, likes, link};
        1:    8-block  0
        1:    8-block  1
    %%%%%:    8-block  2
    %%%%%:    8-block  3
        2:    9:    return this->repo.add_tutorial(t);
        1:    9-block  0
        1:    9-block  1
        -:   10:}
        -:   11:
        1:   12:bool Service::remove_tutorial_service(const std::string& presenter, const std:: string& title)
        1:   12-block  0
        -:   13:///search in the list of tutorials for a tutorial by its title and presenter
        -:   14:///returns the tutorial if it exists or an empty tutorial otherwise
        -:   15:{
        1:   16:    return this->repo.remove_tutorial(presenter, title);
        1:   16-block  0
        -:   17:}
        -:   18:
        1:   19:bool Service::update_tutorial_service(const std::string& presenter, const std:: string& title, int op, const std::string& new_elem)
        1:   19-block  0
        -:   20:///updates the title the presenter or the link of a tutorial, depending on the user option
        -:   21:///returns true if the tutorial was updated, false otherwise
        -:   22:{
        1:   23:    return this->repo.update_tutorial(presenter, title, op, new_elem);
        1:   23-block  0
        -:   24:}
        -:   25:
        1:   26:bool Service::update_tutorial_duration_service(const std::string& presenter, const std:: string& title, double min, double sec)
        1:   26-block  0
        -:   27:///updates the title the duration of a tutorial
        -:   28:///returns true if the tutorial was updated, false otherwise
        -:   29:{
        1:   30:    return this->repo.update_tutorial_duration(presenter, title, min, sec);
        1:   30-block  0
        -:   31:}
        -:   32:
        1:   33:bool Service::update_tutorial_likes_service(const std::string& presenter, const std:: string& title, int likes)
        1:   33-block  0
        -:   34:///updates the title the likes of a tutorial
        -:   35:///returns true if the tutorial was updated, false otherwise
        -:   36:{
        1:   37:    return this->repo.update_tutorial_likes(presenter, title, likes);
        1:   37-block  0
        -:   38:}
        -:   39:
        2:   40:void Service::create_iterator(const std::string & presenter)
        2:   40-block  0
        -:   41:///creates an iterator
        -:   42:///returns a dynamic array that contains the whole list or the tutorials from a given presenter
        -:   43:{
        2:   44:    this->iter.iterator_empty();
        2:   44-block  0
        4:   45:    DynamicVector<Tutorial> t = this->repo.get_tutorials();
        2:   45-block  0
        2:   45-block  1
    %%%%%:   45-block  2
        2:   46:    if (presenter.size() == 0)
        2:   46-block  0
        -:   47:    {
        4:   48:        for (int i = 0; i < t.getSize(); ++i) {
        1:   48-block  0
        4:   48-block  1
        1:   48-block  2
        3:   49:            this->iter.add(t[i]);
        3:   49-block  0
        3:   49-block  1
        3:   49-block  2
    %%%%%:   49-block  3
        -:   50:        }
        -:   51:    } else
        4:   52:        for (int i = 0; i < t.getSize(); ++i) {
        1:   52-block  0
        4:   52-block  1
        3:   52-block  2
        3:   53:            if (t[i].get_presenter() == presenter)
        3:   53-block  0
        3:   53-block  1
        1:   54:                this->iter.add(t[i]);
        1:   54-block  0
        1:   54-block  1
        1:   54-block  2
    %%%%%:   54-block  3
        -:   55:        }
        2:   56:}
        -:   57:
        1:   58:void Service::start_iteration()
        1:   58-block  0
        -:   59:///play the first tutorial from iteration
        -:   60:{
        1:   61:    this->iter.open();
        1:   61-block  0
        1:   62:}
        -:   63:
        1:   64:Tutorial Service::get_current_tutorial()
        1:   64-block  0
        -:   65:///returns the current tutorial from the iterator
        -:   66:{
        1:   67:    return this->iter.get_current_tutorial();
        1:   67-block  0
        -:   68:}
        -:   69:
        1:   70:void Service::next()
        1:   70-block  0
        -:   71:///plays the next tutorial from the iterator
        -:   72:{
        1:   73:    this->iter.next();
        1:   73-block  0
        1:   74:}
        -:   75:
        2:   76:bool Service::add_tutorial_watchlist(const Tutorial & t)
        2:   76-block  0
        -:   77:///add a new tutorial to the watchlist
        -:   78:///returns true if the tutorial was added, false otherwise
        -:   79:{
        2:   80:    return this->watchlist.add_tutorial(t);
        2:   80-block  0
        -:   81:}
        -:   82:
        1:   83:bool Service::delete_tutorial_watchlist(const std::string &presenter, const std::string &title)
        1:   83-block  0
        -:   84:///deletes a tutorial from the watchlist
        -:   85:{
        1:   86:    return this->watchlist.remove_tutorial(presenter, title);
        1:   86-block  0
        -:   87:}
        -:   88:
        2:   89:Tutorial Service::find_by_presenter_and_title_watchlist(const std::string& presenter, const std:: string& title)
        2:   89-block  0
        -:   90:///search in the list of tutorials for a tutorial by its title and presenter
        -:   91:///returns the tutorial if it exists or an empty tutorial otherwise
        -:   92:
        -:   93:{
        2:   94:    return this->watchlist.find_by_presenter_and_title(presenter, title);
        2:   94-block  0
        -:   95:}
        -:   96:
        1:   97:int Service::like_tutorial(const std::string &presenter, const std::string &title)
        1:   97-block  0
        -:   98:///likes a tutorial from the watchlist
        -:   99:{
        2:  100:    Tutorial t = this->find_by_presenter_and_title_watchlist(presenter, title);
        1:  100-block  0
        1:  100-block  1
    %%%%%:  100-block  2
        1:  101:    t.like();
        1:  101-block  0
        1:  102:    int pos = this->repo.find_pos_tutorial(t);
        1:  102-block  0
        1:  103:    this->iter.update_likes(pos);
        1:  103-block  0
        -:  104://    this->update_tutorial_likes_service(presenter, title, t.get_no_of_likes());
        2:  105:    return t.get_no_of_likes();
        1:  105-block  0
        1:  105-block  1
        4:  106:}
        1:  106-block  0
        1:  106-block  1
        1:  106-block  2
        1:  106-block  3
        1:  106-block  4
