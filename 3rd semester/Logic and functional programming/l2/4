;Convert a tree of type (2) to type (1)

;transform(l1l2...ln) = 
;         [], n = 0
;         l1 U 0, n = 1
;         l1 U 1 U transform(l2l3...ln), n = 2
;         l1 U 2 U transform(l2l3...ln) U transform(l3l4...ln), otherwise



(defun transform(l)
    (cond 
        ((null l) nil)
        ((null (cadr l)) (append (list (car l)) (list 0) ))
        ((null (caddr l)) (append (list (car l)) (list 1) (transform (cadr l))))
        (t (append (list (car l)) (list 2) (transform (cadr l)) (transform (caddr l))))
    )
)

;(A 2 B 0 C 2 D 0 E 0) (1)
;(A (B) (C (D) (E))) (2)

;(transform '(A (B) (C (D) (E))))
;(transform '(A(B(D)(E(F(G)(H))))(C(I(J(K))))))
