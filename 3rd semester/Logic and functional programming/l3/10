;. Define a function that replaces one node with another one in a n-tree represented as: root
;list_of_nodes_subtree1... list_of_nodes_subtreen);Eg: tree is (a (b (c)) (d) (e (f))) and node 'b' will be replace with node 'g' => tree (a (g (c)) (d) (e (f)))}



;replaceNode(l1l2...ln, old, new) = 
;        new, if l1 = old
;        l, if l is an atom
;        U k,i=2 replaceNode(li,old,new), otherwise  (l = (l1l2...ln) is a list)        

(defun replaceNode (l old new)
    (cond 
        ((and (atom l) (eq l old)) new)
        ((atom l)  l)
        ((listp l) (mapcar #'(lambda (a) (replaceNode a old new)) l)  )
        
    )
)

;(replaceNode '(1 (2 (3)) (4) (5 (6))) 2 10)
;(replaceNode '(1 (2 (3)) (4) (5 (6))8 10)
;(replaceNode '() 8 10) 8 10)
;(print(replaceNode '(A (B (C)) (D) (E (F)) 'B 'G))



